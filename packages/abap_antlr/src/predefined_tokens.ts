export const PREDEFINED_KEYWORDS = `
// Tokens
CONCATENATEDCONSTANT: CONSTANTSTRING (WS)? (AMPER | DOUBLEAMPER) (WS)? CONSTANTSTRING;
CONSTANTSTRING: STRINGDELIM (~['\\n\\r] | '\\'\\'' | '"')* STRINGDELIM;
NAME : ('/'(LETTERS | '_' | INTEGER)+'/')?(LETTERS | '_' | INTEGER)+;
FIELDNAME: (AMPER | '_' | EXCLAIM)? NAME ((DASH) NAME)*;
SIMPLENAME : (LETTERS | [_0-9])+;
LETTERS: LETTER+;
LETTER: [a-zA-Z];
PERIOD: '.';
LEFTPAREN: '(';
RIGHTPAREN: ')';
METHODLEFTPAREN: '(' WS;
METHODRIGHTPAREN: WS ')';
METHODEMPTYPAREN: '( )';
LEFTBRACKET: '[';
RIGHTBRACKET: ']';
TABLEBRACKETLEFT: LEFTBRACKET WS;
TABLEBRACKETRIGHT: WS RIGHTBRACKET;
DASH: '-';
EXCLAIM: '!';
EQ: '=';
LEFTARROW: '<';
RIGHTARROW: '>';
LEFTRIGHTARROWS: LEFTARROW RIGHTARROW;
RIGHTLEFTARROWS: RIGHTARROW LEFTARROW;
LEFTARROWEQ: LEFTARROW EQ;
RIGHTARROWEQ: RIGHTARROW EQ;
EQLEFTARROW: EQ LEFTARROW;
PLUS: '+';
INTEGER : (PLUS | DASH)? [0-9]+;
QUES: '?';
AMPER: '&';
DOUBLEAMPER: '&&';
ASTERISK: '*';
DOUBLEASTERISK: '**';
DIVIDE: '/';
BITXOR: 'BIT-XOR';
BITAND: 'BIT-AND';
BITOR: 'BIT-OR';
DIV: 'DIV';
MOD: 'MOD';
HASHTAG: '#';
COLON: ':';
TILDE: '~';

// Ignored
COMMENT : ([\\n] '*' ~[\\r\\n]*| '"' ~[\\r\\n]*) -> skip;
WS : [ \\t\\n]+ -> skip;
PRAGMA : '##' ~[.\\r\\n]* -> skip;
`;